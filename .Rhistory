readData <- function()
{
setwd("C:/Users/Owner/Desktop/Gakau/BDM_Sem2/1053/Project")
Movie_Dataset=read.csv(file="training_ratings_for_kaggle_comp.csv")
User_Details=read.csv(file="users.csv")
Movie_Details=read.csv(file="movies.csv")
return(list(Movie_Dataset=Movie_Dataset,User_Details=User_Details,Movie_Details=Movie_Details))
}
#Data Processing#
preProcess <- function(Movie_Details)
{
genres <- as.data.frame(Movie_Details$Genres,stringsAsFactors=FALSE)
#View(genres)
genres_category <- as.data.frame(tstrsplit(genres[,1],'[|]',type.convert = TRUE),stringsAsFactors=FALSE)
colnames(genres_category) <- c(1:5)
return(genres_category)
}
genre_matrix_prep <- function(genres_category)
{
genre_list <- c("Action", "Adventure", "Animation", "Children", "Comedy", "Crime","Documentary", "Drama", "Fantasy","Film-Noir", "Horror", "Musical", "Mystery","Romance","Sci-Fi", "Thriller", "War", "Western")
genre_matrix <- matrix(0,8571,18)
genre_matrix[1,] <- genre_list
colnames(genre_matrix) <- genre_list
for (i in 1:nrow(genres_category))
{
for (c in 1:ncol(genres_category))
{
genmat_col = which(genre_matrix[1,] == genres_category[i,c])
genre_matrix[i+1,genmat_col] <- 1
}
}
genre_df <- as.data.frame(genre_matrix[-1,], stringsAsFactors=FALSE)
for (c in 1:ncol(genre_df))
{
genre_df[,c] <- as.integer(genre_df[,c])
}
return(genre_df)
}
#Ratings update to binary format#
binary_ratings <- function(Movie_Dataset)
{
binaryratings <- Movie_Dataset
nrow(binaryratings)
for (i in 1:nrow(binaryratings))
{
if (binaryratings[i,3] > 3)
{
binaryratings[i,3] <- 1
}
else
{
binaryratings[i,3] <- -1
}
}
return(binaryratings)
}
user_ratings <- function(binaryratings)
{
ratings <- dcast(binaryratings, MovieID~UserID, value.var = "Rating", na.rm=FALSE )
for (i in 1:ncol(ratings))
{
ratings[which(is.na(ratings[,i]) == TRUE),i] <- 0
}
ratings = ratings[,-1]
return(ratings)
}
#Remove rows that are not rated from movies dataset
filter_ratings <- function(Movie_Details,Movie_Dataset)
{
Movie_ID <- length(unique(Movie_Details$MovieID))
Movie_Ratings <- length(unique(Movie_Dataset$MovieID))
movies2 <- Movie_Details[-which((Movie_ID %in% Movie_Ratings) == FALSE),]
rownames(movies2) <- NULL
#Remove rows that are not rated from genre_df
genre_matrix3 <- genre_df[-which((Movie_ID %in% Movie_Ratings) == FALSE),]
rownames(genre_matrix3) <- NULL
return(genre_matrix3)
}
#Calculate dot product for User Profiles
cal_dot_product <- function(ratings,genre_matrix3)
{
result = matrix(0,18,3255)
View(genre_matrix3)
View(ratings)
for (c in 1:ncol(ratings))
{
for (i in 1:ncol(genre_matrix3))
{
result[i,c] <- sum((genre_matrix3[,i]) * (ratings[,c]))
}
}
View(result)
#Convert to Binary scale
for (i in 1:nrow(result))
{
if (result[i] < 0)
{
result[i] <- 0
}
else
{
result[i] <- 1
}
}
return(result)
}
#Content-based Filtering Approach#
mov_rec <- function(result,Movie_Details)
{
result2 <- result[1,] #First user's profile
sim_mat <- rbind.data.frame(result2, genre_matrix3)
sim_mat <- data.frame(lapply(sim_mat,function(x){as.integer(x)})) #convert data to type integer
#Calculate Jaccard distance between user profile and all movies
sim_results <- dist(sim_mat, method = "Jaccard")
sim_results <- as.data.frame(as.matrix(sim_results[1:8552]))
rows <- which(sim_results == min(sim_results))
#Recommended movies
#Movie_Details[rows,]
return(Movie_Details[rows,2])
}
#User-Based Collaborative Filtering Approach
createRatingMatrix <- function(Movie_Dataset)
{
#Create ratings matrix. Rows = userId, Columns = movieId
ratingmat <- dcast(Movie_Dataset, UserID~MovieID, value.var = "Rating", na.rm=FALSE)
ratingmat <- as.matrix(ratingmat[,-1]) #remove userIds
dim(ratingmat)
#Convert rating matrix into a recommenderlab sparse matrix
ratingmat <- as(ratingmat, "realRatingMatrix")
return(ratingmat)
}
evaluateModels <- function(ratingmat,Movie_Details)
{
ratingmat_norm <- normalize(ratingmat)
recommender_model <- Recommender(ratingmat_norm, method = "UBCF", param=list(method="Cosine",nn=30))
recom <- predict(recommender_model, ratingmat[1], n=10) #Obtain top 10 recommendations for 1st user in dataset
recom_list <- as(recom, "list") #convert recommenderlab object to readable list
recom_result <- matrix(0,10)
for (i in c(1:10))
{
recom_result[i] <- as.matrix(Movie_Details[as.integer(recom_list[[1]][i]),2])
}
return(recom_result)
}
eval_resultset <- function(ratingmat)
{
evaluation_scheme <- evaluationScheme(ratingmat, method="cross-validation", k=5, given=2, goodRating=5) #k=5 meaning a 5-fold cross validation. given=3 meaning a Given-3 protocol
evaluation_results <- evaluate(evaluation_scheme, method="UBCF", n=c(1,3,5,10,15,20))
eval_results <- getConfusionMatrix(evaluation_results)[[1]]
}
visualise <- function()
{
evaluation_scheme <- evaluationScheme(ratingmat, method="cross-validation", k=5, given=2, goodRating=5)
models_to_evaluate <- list(IBCF_cos = list(name = "IBCF", param = list(method = "cosine")),UBCF_cos = list(name = "UBCF", param = list(method = "cosine")), POPULAR_cor = list(name = "POPULAR", param = NULL),RANDOM = list(name = "RANDOM", param=NULL))
n_recommendations <- c(1, 3, 5, 10, 15, 20)
list_results <- evaluate(x = evaluation_scheme, method = models_to_evaluate, n = n_recommendations)
sapply(list_results, class) == "evaluationResults"
avg_matrices <- lapply(list_results, avg)
head(avg_matrices$IBCF_cos[, 5:8])
plot(list_results, annotate = 1, legend = "topleft")
title("ROC curve")
plot(list_results, "prec/rec", annotate = 1, legend = "bottomright")
title("Precision-recall")
}
dataList <- readData()
genres_category <- preProcess(dataList$Movie_Details)
View(genres_category)
genres_category <- preProcess(dataList$Movie_Details)
library(dplyr)
library(data.table)
library(reshape2)
library(proxy)
library(recommenderlab)
library(lsa)
genres_category <- preProcess(dataList$Movie_Details)
View(genres_category)
genre_df <- genre_matrix_prep(genres_category)
View(genre_df)
binaryratings <- binary_ratings(dataList$Movie_Dataset)
